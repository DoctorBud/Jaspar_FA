
Restarting from a couple of hundred lines into README_FA_genes
just before the creation of the bed intersection files.

https://github.com/TomConlin/Jaspar_FA/blob/master/README.FA_genes

The main differences are I am switching from RefSeq to NCBIGene right away
instead of at the end and I know exactly where we are going.


convert from refseq to nchi and collapse then merge overlapping regions

awk 'BEGIN{OFS="\t"}FNR==NR{g[$1]=$2}FNR!=NR{if($4 in g)$4=g[$4];print}' data/refseq_entrez.tab data/upstream1000.bed | sort -k4,4 -k2n,2 -u | \
awk 'BEGIN{OFS="\t"}$4==g && b>=$2 {$2=a;r=$0}$4==g && b<$2 {print r;r=$0;a=$2;b=$3} $4!=g {print r;r=$0;g=$4;a=$2;b=$3}'|sort -k1,1 -k2n,2 -u > data/upstream_gene1000.bed

upstream regions
wc -l < data/upstream_gene1000.bed
21977

genes with the most upstream regions

cut -f4  data/upstream_gene1000.bed | sort | uniq -c| sort -nr | head
     10 6925
      9 10801
      9 100507170
      8 5144
      8 1588
      7 84894
      7 83641
      7 5998
      7 5339
      7 29


awk 'BEGIN{OFS="\t"}FNR==NR{g[$1]=$2}FNR!=NR{if($4 in g)$4=g[$4];print}' data/refseq_entrez.tab data/upstream2000.bed | sort -k4,4 -k2n,2 -u | awk 'BEGIN{OFS="\t"}$4==g && b>=$2 {$2=a;r=$0}$4==g && b<$2 {print r;r=$0;a=$2;b=$3} $4!=g {print r;r=$0;g=$4;a=$2;b=$3}'|sort -k1,1 -k2n,2 -u > data/upstream_gene2000.bed

awk 'BEGIN{OFS="\t"}FNR==NR{g[$1]=$2}FNR!=NR{if($4 in g)$4=g[$4];print}' data/refseq_entrez.tab data/upstream5000.bed | sort -k4,4 -k2n,2 -u | awk 'BEGIN{OFS="\t"}$4==g && b>=$2 {$2=a;r=$0}$4==g && b<$2 {print r;r=$0;a=$2;b=$3} $4!=g {print r;r=$0;g=$4;a=$2;b=$3}'|sort -k1,1 -k2n,2 -u > data/upstream_gene5000.bed



bedtools intersect -wa -wb -a data/upstream_gene1000.bed -b MA_all.bed  > MA_up1k.bed
bedtools intersect -wa -wb -a data/upstream_gene2000.bed -b MA_all.bed  > MA_up2k.bed
bedtools intersect -wa -wb -a data/upstream_gene5000.bed -b MA_all.bed  > MA_up5k.bed


keep  ncbigene id
reduce the region extent to a  signed centroid
keep the motif name
reduce the motif location extent to signed centroid

signed centroid is just (stop + start) / 2 * sense


The sense is strictly the genes sense not the motifs sense and will cause
negative numbers to sort backwards as we are capturing the motif order w.r.t. the gene.

This does beg the question is the motif different if it is used backwards?


awk '{print $4 "\t" $6 int(($2+$3)/2) "\t" $6 int(($8+$9)/2) "\t" $10}' MA_up1k.bed | sort -u -k1,1 -k2n,2 -k3n,3 > gene_rc_mc_motif_1k.tab

awk '{print $4 "\t" $6 int(($2+$3)/2) "\t" $6 int(($8+$9)/2) "\t" $10}' MA_up2k.bed | sort -u -k1,1 -k2n,2 -k3n,3 > gene_rc_mc_motif_2k.tab

awk '{print $4 "\t" $6 int(($2+$3)/2) "\t" $6 int(($8+$9)/2) "\t" $10}' MA_up5k.bed | sort -u -k1,1 -k2n,2 -k3n,3 > gene_rc_mc_motif_5k.tab

wc -l gene_rc_mc_motif_?k.tab

  28471 gene_rc_mc_motif_1k.tab
  35356 gene_rc_mc_motif_2k.tab
  51317 gene_rc_mc_motif_5k.tab
 115144 total

unique motif_locations
cut -f1,3 gene_rc_mc_motif_?k.tab | sort -u | wc -l
58274

-------------------------------
How many unique ncbigene

cut -f1 gene_rc_mc_motif_1k.tab | uniq | wc -l
13,116

cut -f1 gene_rc_mc_motif_2k.tab | uniq | wc -l
14,478

cut -f1 gene_rc_mc_motif_5k.tab | uniq | wc -l
16,444

-----------------------------------------------------
How many unique ncbigene upstream regions (inc multiple starts)

cut -f1,2 gene_rc_mc_motif_1k.tab | uniq | wc -l
13,832

cut -f1,2 gene_rc_mc_motif_2k.tab | uniq | wc -l
15,268

cut -f1,2 gene_rc_mc_motif_5k.tab | uniq | wc -l
17,377
----------------------------------------------
note: collapsing into ncbigenes from the start
results in fewer 'genes' / upstream regions

compare with unique refseq

cut -f 4  MA_up1k.bed | sort -u | wc -l
31,253

cut -f 4  MA_up2k.bed | sort -u | wc -l
34,937

cut -f 4  MA_up5k.bed | sort -u | wc -l
40,072

that is a bit is a hit but probably for the best

----------------------------------

collect the set of motifs per ncbigene upstream region

cut -f1,2,4 gene_rc_mc_motif_1k.tab | sort -u | cut -f1,2 | uniq -c | awk '{c+=$1}END{print c/NR}'
1.8784  motif per upstream "1k" region

cut -f1,2,4 gene_rc_mc_motif_2k.tab | sort -u | cut -f1,2 | uniq -c | awk '{c+=$1}END{print c/NR}'
2.09353 motif per upstream "2k" region

cut -f1,2,4 gene_rc_mc_motif_5k.tab | sort -u | cut -f1,2 | uniq -c | awk '{c+=$1}END{print c/NR}'
2.60195 motif per upstream "5k" region

pretty much half ...  this is going to take a big bite
out of the number of motif sets greater than two

cut -f1,2,4 gene_rc_mc_motif_1k.tab | sort -u | cut -f1,2 | uniq -c | awk '$1>2{c++}END{print c}'
3119


cut -f1,2,4 gene_rc_mc_motif_1k.tab | sort -u  > gene_motif_1k.tab
cut -f1,2,4 gene_rc_mc_motif_2k.tab | sort -u  > gene_motif_2k.tab
cut -f1,2,4 gene_rc_mc_motif_5k.tab | sort -u  > gene_motif_5k.tab

awk 'gr==$1"\t"$2{s=s "\t" $3}gr!=$1"\t"$2{print s;gr=$1"\t"$2;s=gr "\t" $3}END{print s}' \
	gene_motif_1k.tab > gene_motifset_1k.tab

awk 'gr==$1"\t"$2{s=s "\t" $3}gr!=$1"\t"$2{print s;gr=$1"\t"$2;s=gr "\t" $3}END{print s}' \
	gene_motif_2k.tab > gene_motifset_2k.tab

awk 'gr==$1"\t"$2{s=s "\t" $3}gr!=$1"\t"$2{print s;gr=$1"\t"$2;s=gr "\t" $3}END{print s}' \
	gene_motif_5k.tab > gene_motifset_5k.tab

how many motif_sets?

cut -f3- gene_motifset_1k.tab | sort -u | wc -l
3,597

cut -f3- gene_motifset_2k.tab | sort -u | wc -l
4,643

cut -f3- gene_motifset_5k.tab | sort -u | wc -l
6,499

how many motif_sets all together
cut -f3- gene_motifset_?k.tab | sort -u | wc -l
9,998

reduce the motif_set to a binary signature,
here based on the index into a sorted list

Jaspar has 141 motifs in the assembly
but within only 130 the upstream regions we find:
cut -f4 MA_all.bed  | sort -u | wc -l
141

cut -f2 gene_motif_?k.tab | sort -u | wc -l
130

can provide a tiny bit of future proofing by indexing into the full set
cut -f4 MA_all.bed  | sort -u > motif.list

# make a bit vector signature for the motif set
# keep larger sig (superset) before smaller sig (subset)

awk 'BEGIN{i=1}FNR==NR{m[$1]=i;i++}\
	FNR!=NR{ms=0;for(i=3;i<=NF;i++){ms+=2^m[$i]}\
	if($1)print $1 "\t" $2 "\t" ms "\t" NF-2}' \
	motif.list gene_motifset_1k.tab | sort -k2nr,2 > gene_motifsetsig_1k.tab

awk 'BEGIN{i=1}FNR==NR{m[$1]=i;i++}\
	FNR!=NR{ms=0;for(i=3;i<=NF;i++){ms+=2^m[$i]}\
	if($1)print $1 "\t" $2 "\t" ms "\t" NF-2}' \
	motif.list gene_motifset_2k.tab | sort -k2nr,2 > gene_motifsetsig_2k.tab

awk 'BEGIN{i=1}FNR==NR{m[$1]=i;i++}\
	FNR!=NR{ms=0;for(i=3;i<=NF;i++){ms+=2^m[$i]}\
	if($1)print $1 "\t" $2 "\t" ms "\t" NF-2}' \
	motif.list gene_motifset_5k.tab | sort -k2nr,2 > gene_motifsetsig_5k.tab

how many ncbigene upstream region motifsets
  13833 gene_motifset_1k.tab
  15269 gene_motifset_2k.tab
  17378 gene_motifset_5k.tab
  46480 total


how many ncbigene upstream region motifsetsigs
wc -l gene_motifsetsig_?k.tab
  13833 gene_motifsetsig_1k.tab
  15269 gene_motifsetsig_2k.tab
  17378 gene_motifsetsig_5k.tab
  46480 total

none were lost converting to sigs


how many unique set signatures
cut -f3  gene_motifsetsig_1k.tab | sort -u | wc -l
2146

cut -f3  gene_motifsetsig_2k.tab | sort -u | wc -l
2938

cut -f3  gene_motifsetsig_5k.tab | sort -u | wc -l
4526

all together
cut -f3  gene_motifsetsig_?k.tab | sort -u | wc -l
6000

above we see the drop in unique motif sets reported due to order not mattering

report proper subsets from existing regions (across all three region extents)

cut -f3 gene_motifsetsig_?k.tab |sort -unr|\
awk '{a[++i]=$1}END{for(i=1;i<NR;i++){for(j=i+1;j<NR;j++){\
 if(a[j]==and(a[i],a[j]))print a[i] "\t" a[j]}}}' > motifsetsig_subset.tab

wc -l < motifsetsig_subset.tab
10436   (I don't really trust this gawk's or() ; not always seem reliable)


isolate the motifset_size

cut -f3,4 gene_motifsetsig_?k.tab |sort -unr > motifsetsig_count.tab

wc -l <  motifsetsig_count.tab
5999

Also want motifs associated with each motifset it is an element of.
this is for xref linking in lieu of creating proper Jaspar motifs

cut -f3- gene_motifset_?k.tab | sort -u > motifset.tab
wc -l < motifset.tab
9998

awk 'BEGIN{i=1}FNR==NR{m[$1]=i;i++}FNR!=NR{sig=0;for(i=1;i<=NF;i++){if($i in m){sig+=2^m[$i]}else print "ERROR $i in $0 at " i}for(i=1;i<=NF;i++)print sig "\t" $i}' motif.list  motifset.tab > motifsetsig_motif.tab

wc -l < motifsetsig_motif.tab
48796

sanity check
grep "^0" motifsetsig_motif.tab | wc -l
0

-----------------------------------------------------------------------------

we have explicit proper subsets between regions
but we could also associate regions with common subsets (of more than two)
which do not exist independently (if any)

it hamming_weight(region_1 AND region_2) > 2 then
	<region_1> <share_common_subset> <region_2>


################################################################################

                DiMotifs

get these from

gene_rc_mc_motif_5k.tab
gene_rc_mc_motif_2k.tab
gene_rc_mc_motif_1k.tab

head  gene_rc_mc_motif_1k.tab
1	-58865365	-58865426	MA0058.2
100	-43280899	-43280924	MA0154.2
100	-43280899	-43280470	MA0144.2
100	-43280899	-43280469	MA0473.1
1000	-25757910	-25758363	MA0144.2
1000	-25617049	-25617469	MA0035.3
10001	-71067907	-71067502	MA0162.2
10001	-71067907	-71067475	MA0162.2
10001	-71067907	-71067442	MA0506.1

by default, the first couple of dimotifs are:

NCBIGene:100  MA0154.2  ->  MA0144.2
NCBIGene:100  MA0144.2  ->  MA0473.1

but if we consider the distance between them

NCBIGene:100  MA0154.2  --(454)-->  MA0144.2
NCBIGene:100  MA0144.2  ---(1)--->  MA0473.1

we may be better served with

NCBIGene:100  MA0154.2  ->  MA0144.2
NCBIGene:100  MA0154.2  ->  MA0473.1

and somehow indicate they are alternatives?

what is the length of a jaspar motif?
cut -f 2,3 MA_all.bed| awk '{a+=$1;b+=$2}END{print (b-a)/NR}'
13.0237
if less then 14 bp apart then consider overlapping
(get feedback from PR on min dist and possible max although I doubt it)


awk 'g==$1"\t"$2{print g "\t" m "\t" $4 "\t" $3 - x;x=$3;m=$4}g!=$1"\t"$2{g=$1"\t"$2;x=$3;m=$4}' gene_rc_mc_motif_1k.tab > gene_m1_m2_dx_1k.tab

awk 'g==$1"\t"$2{print g "\t" m "\t" $4 "\t" $3 - x;x=$3;m=$4}g!=$1"\t"$2{g=$1"\t"$2;x=$3;m=$4}' gene_rc_mc_motif_2k.tab > gene_m1_m2_dx_2k.tab

awk 'g==$1"\t"$2{print g "\t" m "\t" $4 "\t" $3 - x;x=$3;m=$4}g!=$1"\t"$2{g=$1"\t"$2;x=$3;m=$4}' gene_rc_mc_motif_5k.tab > gene_m1_m2_dx_5k.tab

wc -l gene_m1_m2_dx_?k.tab
  14708 gene_m1_m2_dx_1k.tab
  20123 gene_m1_m2_dx_2k.tab
  33984 gene_m1_m2_dx_5k.tab
  68,815 total

this is a ~80% reduction from the first total of 337,420


look for very large distances between motifs
this will indicate they are from merged overlapping regions

awk '$5>1000' gene_m1_m2_dx_1k.tab | wc -l
31

cut -f5 gene_m1_m2_dx_1k.tab | sort -nr | head -3
1678
1643
1539

cut -f5 gene_m1_m2_dx_2k.tab | sort -nr | head -3
3116
3042
3033

cut -f5 gene_m1_m2_dx_5k.tab | sort -nr | head -3
8443
8112
8097

at most around 150% over the nominal extent
which will be due to merged overlapping regions.

much as I hate to further reduce the count of dimotifs,
handeling over lapping motifs seems the only honest route.

(but maybe overlaping motifs can both be in play when the strands are separated?)

Too much second guessing
will just process as first time until I have spoken to PR / biologist


time cut -f1-4 gene_m1_m2_dx_1k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.2" motif.list -  > gene_pair_dimotif_jaccard_1k.tab

time cut -f1-4 gene_m1_m2_dx_2k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.2" motif.list -  > gene_pair_dimotif_jaccard_2k.tab

time cut -f1-4 gene_m1_m2_dx_5k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.2" motif.list -  > gene_pair_dimotif_jaccard_5k.tab


real	1m55.267s
user	1m55.152s
sys 	0m0.076s


real	2m56.593s
user	2m56.568s
sys		0m0.028s


real	5m47.180s
user	5m47.132s
sys		0m0.068s


wc -l  gene_pair_dimotif_jaccard_?k.tab
  85603 gene_pair_dimotif_jaccard_1k.tab
  79653 gene_pair_dimotif_jaccard_2k.tab
  78300 gene_pair_dimotif_jaccard_5k.tab
 243556 total

several hours faster. 
counts are lower but more manageable



cut -f5  gene_pair_dimotif_jaccard_1k.tab | sort |uniq -c 
      1 0.0357143
      1 0.04
      2 0.0416667
      3 0.0434783
      9 0.0454545
     20 0.047619
     32 0.05
     61 0.0526316
    122 0.0555556
    188 0.0588235
    391 0.0625
    518 0.0666667
    863 0.0714286
   1359 0.0769231
   2072 0.0833333
   3167 0.0909091
   4258 0.1
   6058 0.111111
   8307 0.125
  10784 0.142857
  12569 0.166667
  14093 0.2
  14087 0.25
  12768 0.333333
   8445 0.5
   4550 1


peaks around 1 in 4 or 5. 
2k & 5k exhibit similar curves
filtering out any below 1 in 8 is safe 
but may not be loosing enough weak associations
trying one in five

  14093 0.2
  14087 0.25
  12768 0.333333
   8445 0.5
   4550 1

wc -l  gene_pair_dimotif_jaccard_?k.tab
  53943 gene_pair_dimotif_jaccard_1k.tab
  44524 gene_pair_dimotif_jaccard_2k.tab
  36647 gene_pair_dimotif_jaccard_5k.tab
 135114 total

This looks to me like a reasonable number of associations to consider

note well:
Whether the  counts go down in the longer extents depends on 
removing the tail

This says the size of the union grows faster than the size of the intersection 
when you increase the extent only if you maintain a standard that excludes
fainter signals. 

#####################################################################

after turning into  (pseudo) RDF

jaspar_curies.nt  is 55M

expanding curies to IRI will be more

wc -l < jaspar_curies.nt
924637

a little less than  million statements

#######################################################################

used the 'jaspar_curies.nt' results at this point to 
work through README.proof_is_in_the_pudding  
https://github.com/TomConlin/Jaspar_FA/blob/master/README.proof_is_in_the_pudding

Before moving on to creating the proper RDF dataset.

#######################################################################


reconsidering the "one in five cutoff"

with the largest extent
time cut -f1-4 gene_m1_m2_dx_5k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.0" motif.list -  > bar

cut -f 5  bar | sort |uniq -c | otsu.awk 
0.027027

gives a "lowest" threshold
recursively partitioning the remainder will bring us to some cutoff
time cut -f1-4 gene_m1_m2_dx_5k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.027" motif.list -  > bar
cut -f 5  bar | sort |uniq -c | otsu.awk 
0.5

that is steep. maybe extent dependent?

time cut -f1-4 gene_m1_m2_dx_1k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.0" motif.list -  > bar

cut -f 5  bar | sort |uniq -c | otsu.awk 
0.0434783

time cut -f1-4 gene_m1_m2_dx_1k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.0434783" motif.list -  > bar

cut -f 5  bar | sort |uniq -c | otsu.awk
0.05

two applications of utsu gives thresholds of 
1k  0.05      (three applications gives 0.5)
2k  0.0434783 (three applications gives 0.5)
5k  0.5

which is not what I had hoped,
otsu is just isolating the extream values 

# just checking what insisting on 50%  intersection/union on dimotifs leaves
time cut -f1-4 gene_m1_m2_dx_1k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.5" motif.list -  > foo1k.tab
time cut -f1-4 gene_m1_m2_dx_2k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.5" motif.list -  > foo2k.tab
time cut -f1-4 gene_m1_m2_dx_5k.tab| sort -u|./gene_region_dimotif_jaccard.awk -v "CUTOFF=0.5" motif.list -  > foo5k.tab

 wc -l  foo?k.tab
  12995 foo1k.tab
   9690 foo2k.tab
   6714 foo5k.tab
  29399 total

#####################################################

whatever the cutoff  we need three mapping files

1)  a curie_prefix to base_IRI  
	for monarch this  is 'curie_map.yaml'
	contains 
	'curie_prefix' : 'base_IRI'

2)  a local translation table. 
	Changes source specific "whatever" strings into human friendly ontological labels.
	in this case should be 'jaspar.yaml' in a translation_table directory.
	contains  
	"ICANTBELIVETHEYCALLITTHIS"  : 'curie_prefix:something_reasonable'

3)  a global translation table.
	Changes human friendly ontological labels into 
	machine readable ontological term identifiers to be emitted as RDF.
	contains
	'curie_prefix:something_reasonable' : 'curie_prefix:000000012345'


The point of the first translation is simple shortening long identifier strings.

The point of the second is to lift variable names and concepts as expressed by
different entities to a common language (word set) consisting solely of 
labels attached to the carefully chosen ontological terms represented 
in the semantic model. 

The point of the third is to allow the software creator/maintainer to avoid
both arbitrary verbiage from external sources and opaque identifiers 
whilst enforcing a common subset of ontological terms across multiple sources

note: 
In the second two files the 'curie_prefix:' before 'something_reasonable'
is not currently necessary and not currently implemented in the dipper ingest 
or two starting to use this process. 
But is seems inevitable we will wish to use labels which different ontologists
have collided on, in which case the prefix will become necessary.  

Other benefits of isolating mapping artifacts include 

- Offline verification of terms/labels with the ontologies they are derived from.
 	(Maintenance/update cycle is dependent on the ontologies not on the ingest)

- avoids a large amount of technical debt and code clutter


metadata files which should in general exist but do not include 
	curie_prefix to canonical owl file location
	ontology predicate to domain/range and possibly type
	(not convinced type matters)

##############################################################################


Again using the GraphZViz target model

All Subjects must be an IRI, and should never be an ontological term
(that is what owl ontology files are for).
they should be a direct data IRI from the source
or a blank nodes (bnode) which are indirect data IRI 
based on unique collections of datum found in the source.


awk '/ -> /{print $1}' jaspar_target_model.gv | grep -v "//" | sort -u

"BNODE:gene1_upstream_region"
"BNODE:gene2_upstream_region"
"BNODE:motif_set"
"BNODE:pairwise
"NCBIGene:123"

---
All Predicate must be ontology terms. 

sed -n 's|.*\[label="\([^"]*\)".*|\1|gp' jaspar_target_model.gv |\
 sort -u > jaspar_target_model_predicate_curie.list

GENO:has_extent
OIO:hasdbxref
OIO:subset
rdf:comment
rdfs:label
rdf:type
rdf:value
RO:has member
RO:member of
SO:adjacent_to
SO:overlaps
SWO:Similarity score


---
Objects can be ontological IRI, data IRI, or literals 
but their type can be limited by their predicate's range,
e.g.
	if the predicate is "rdf:type" 
	then the object should be an IRI for an ontological Class

	if the predicate is "rdfs:label"
	then the object should be a literal (and probably not an ontological IRI)


awk '/ -> /{print $3}' jaspar_target_model.gv | grep -v "//" | sort -u | grep ":"


"BNODE:gene1_upstream_region"
"BNODE:motif_set"
"BNODE:pairwise

"http:JASPAR:motif"
"SIO:collection"
"SO:five_prime_flanking_region"

##########################################################

In this ingest's case since nothing from the source but the motif names 
make it through the dataset creation process the local translation table 
will be pretty light. 



